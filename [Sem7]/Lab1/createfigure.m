function [yplot1]=createfigure(Y1)
%CREATEFIGURE(Y1)
%  Y1:  vector of y data

%  Auto-generated by MATLAB on 02-Oct-2019 18:56:47

% Create figure
figure1 = figure;

% Create axes
axes1 = axes('Parent',figure1,'Position',[0.13 0.5675 0.775 0.3575]);
hold(axes1,'on');

% Create plot
plot1 = plot(Y1,'DisplayName','data1','Parent',axes1);

% Get xdata from plot
xdata1 = get(plot1, 'xdata');
% Get ydata from plot
ydata1 = get(plot1, 'ydata');
% Make sure data are column vectors
xdata1 = xdata1(:);
ydata1 = ydata1(:);


% Remove NaN values and warn
nanMask1 = isnan(xdata1(:)) | isnan(ydata1(:));
if any(nanMask1)
    warning('GeneratedCode:IgnoringNaNs', ...
        'Data points with NaN coordinates will be ignored.');
    xdata1(nanMask1) = [];
    ydata1(nanMask1) = [];
end

% Find x values for plotting the fit based on xlim
axesLimits1 = xlim(axes1);
xplot1 = linspace(axesLimits1(1), axesLimits1(2));

% Prepare for plotting residuals
set(axes1,'position',[0.1300    0.5811    0.7750    0.3439]);
residAxes1 = axes('position', [0.1300    0.1100    0.7750    0.3439], ...
    'parent', gcf);
savedResids1 = zeros(length(xdata1), 1);
% Sort residuals
[sortedXdata1, xInd1] = sort(xdata1);

% Find coefficients for polynomial (order = 1)
[fitResults1,~,mu1] = polyfit(xdata1,ydata1,1);
% Evaluate polynomial
yplot1 = polyval(fitResults1,xplot1,[],mu1);

% Save type of fit for "Show norm of residuals".
fittypesArray1(1) = 2;

% Calculate and save residuals - evaluate using original xdata
Yfit1 = polyval(fitResults1,xdata1,[],mu1);
resid1 = ydata1 - Yfit1(:);
savedResids1(:,1) = resid1(xInd1);
savedNormResids1(1) = norm(resid1);
% Plot the fit
fitLine1 = plot(xplot1,yplot1,'DisplayName','   linear','Tag','linear',...
    'Parent',axes1,...
    'Color',[0.929 0.694 0.125]);

% Set new line in proper position
setLineOrder(axes1,fitLine1,plot1);

% Plot residuals in a bar plot
residPlot1 = bar(residAxes1, sortedXdata1, savedResids1);
% Set colors to match fit lines
set(residPlot1(1), 'facecolor', [0.929 0.694 0.125],'edgecolor', [0.929 0.694 0.125]);
% Set residual plot axis title
title(residAxes1, 'residuals');

% "Show norm of residuals" was selected
showNormOfResiduals(residAxes1,fittypesArray1,savedNormResids1);

% Uncomment the following line to preserve the X-limits of the axes
% xlim(axes1,[-0.2 250]);
box(axes1,'on');
% Create legend
legend(axes1,'show');

%-------------------------------------------------------------------------%
function setLineOrder(axesh1, newLine1, associatedLine1)
%SETLINEORDER(AXESH1,NEWLINE1,ASSOCIATEDLINE1)
%  Set line order
%  AXESH1:  axes
%  NEWLINE1:  new line
%  ASSOCIATEDLINE1:  associated line

% Get the axes children
hChildren = get(axesh1,'Children');
% Remove the new line
hChildren(hChildren==newLine1) = [];
% Get the index to the associatedLine
lineIndex = find(hChildren==associatedLine1);
% Reorder lines so the new line appears with associated data
hNewChildren = [hChildren(1:lineIndex-1);newLine1;hChildren(lineIndex:end)];
% Set the children:
set(axesh1,'Children',hNewChildren);

%-------------------------------------------------------------------------%
function showNormOfResiduals(residaxes1, fittypes1, normResids1)
%SHOWNORMOFRESIDUALS(RESIDAXES1,FITTYPES1,NORMRESIDS1)
%  Show norm of residuals
%  RESIDAXES1:  axes for residuals
%  FITTYPES1:  types of fits
%  NORMRESIDS1:  norm of residuals

txt = cell(length(fittypes1) ,1);
for i = 1:length(fittypes1)
    txt{i,:} = getResidString(fittypes1(i),normResids1(i));
end
% Save current axis units; then set to normalized
axesunits = get(residaxes1,'units');
set(residaxes1,'units','normalized');
text(.05,.95,txt,'parent',residaxes1, ...
    'verticalalignment','top','units','normalized');
% Reset units
set(residaxes1,'units',axesunits);

%-------------------------------------------------------------------------%
function [s1] = getResidString(fittype1, normResid1)
%GETRESIDSTRING(FITTYPE1,NORMRESID1)
%  Get "Show norm of residuals" text
%  FITTYPE1:  type of fit
%  NORMRESID1:  norm of residuals

% Get the text from the message catalog.
switch fittype1
    case 0
        s1 = getString(message('MATLAB:graph2d:bfit:ResidualDisplaySplineNorm'));
    case 1
        s1 = getString(message('MATLAB:graph2d:bfit:ResidualDisplayShapepreservingNorm'));
    case 2
        s1 = getString(message('MATLAB:graph2d:bfit:ResidualDisplayLinearNorm', num2str(normResid1)));
    case 3
        s1 = getString(message('MATLAB:graph2d:bfit:ResidualDisplayQuadraticNorm', num2str(normResid1)));
    case 4
        s1 = getString(message('MATLAB:graph2d:bfit:ResidualDisplayCubicNorm', num2str(normResid1)));
    otherwise
        s1 = getString(message('MATLAB:graph2d:bfit:ResidualDisplayNthDegreeNorm', fittype1-1, num2str(normResid1)));
end

